import express, { Request, Response } from "express";
import { body } from "express-validator";
import jwt from "jsonwebtoken";
import { ValidateRequest, BadRequestError } from "@sorin21us/-dscommon";

import { User } from "../models/user";

const router = express.Router();

router.post(
  "/api/users/signup",
  [
    body("email").isEmail().withMessage("Email must be valid"),
    body("password").trim().isLength({ min: 4, max: 20 }).withMessage("Password must be between 4 and 20 characters"),
  ],
  ValidateRequest,
  async (req, res) => {
    const { email, password } = req.body;

    // if no user with this email found, then existingUser will be null
    const existingUser = await User.findOne({ email });

    // if the user already exists, exit
    if (existingUser) {
      // console.log("Email in use!");
      // res.send({});
      throw new BadRequestError("Email exists already!");
    }

    // Otherwise we create a new user and save it to database
    const user = User.build({ email, password });
    await user.save();

    // 1. Generate jsonwebtoken
    // inside sign() we add the payload, the payload beying some info about the user
    // to know, for all other services, who this user is
    // In this stage we have only the id, generated by MongoDB, email and password so
    // will want only id and email, not password, from User
    // because we didn't use a callback inside jwt, this call will be sync
    // so will get jwt token instantly
    // We want only id and email, not password, from User
    const userJWT = jwt.sign(
      {
        id: user.id,
        email: user.email,
      },
      process.env.JWT_KEY!
      // "dasdsa"
    );

    // 2. And store it on session object, on request object
    // because we use TS we can't do like in docs
    // req.session.jwt = userJWT;
    // because the type definition that is handled by TS doesn't want to assume that
    // there is an object in req.session
    req.session = {
      jwt: userJWT,
    };

    // 201 if the record was created, send the whole user
    res.status(201).send(user);
  }
);

/* 
  The reason we are renaming that export with this router as current user router is that we're going to
  end up with many different routers inside of our application.
  And so they can't all be called router. They have to be called something different.
*/
export { router as sigupRouter };
